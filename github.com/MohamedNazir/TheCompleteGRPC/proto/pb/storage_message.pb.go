// Code generated by protoc-gen-go. DO NOT EDIT.
// source: storage_message.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Storage_Driver int32

const (
	Storage_UNKNOWN Storage_Driver = 0
	Storage_HDD     Storage_Driver = 1
	Storage_SSD     Storage_Driver = 2
)

var Storage_Driver_name = map[int32]string{
	0: "UNKNOWN",
	1: "HDD",
	2: "SSD",
}
var Storage_Driver_value = map[string]int32{
	"UNKNOWN": 0,
	"HDD":     1,
	"SSD":     2,
}

func (x Storage_Driver) String() string {
	return proto.EnumName(Storage_Driver_name, int32(x))
}
func (Storage_Driver) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 0} }

type Storage struct {
	Driver Storage_Driver `protobuf:"varint,1,opt,name=driver,enum=com.pcbook.Storage_Driver" json:"driver,omitempty"`
	Memory *Memory        `protobuf:"bytes,2,opt,name=memory" json:"memory,omitempty"`
}

func (m *Storage) Reset()                    { *m = Storage{} }
func (m *Storage) String() string            { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()               {}
func (*Storage) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Storage) GetDriver() Storage_Driver {
	if m != nil {
		return m.Driver
	}
	return Storage_UNKNOWN
}

func (m *Storage) GetMemory() *Memory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func init() {
	proto.RegisterType((*Storage)(nil), "com.pcbook.Storage")
	proto.RegisterEnum("com.pcbook.Storage_Driver", Storage_Driver_name, Storage_Driver_value)
}

func init() { proto.RegisterFile("storage_message.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4c, 0x4f, 0x8d, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x4a, 0xce, 0xcf, 0xd5, 0x2b, 0x48, 0x4e, 0xca, 0xcf, 0xcf, 0x96, 0x12, 0xc9,
	0x4d, 0xcd, 0xcd, 0x2f, 0xaa, 0x44, 0x55, 0xa1, 0x34, 0x89, 0x91, 0x8b, 0x3d, 0x18, 0xa2, 0x57,
	0xc8, 0x88, 0x8b, 0x2d, 0xa5, 0x28, 0xb3, 0x2c, 0xb5, 0x48, 0x82, 0x51, 0x81, 0x51, 0x83, 0xcf,
	0x48, 0x4a, 0x0f, 0xa1, 0x5d, 0x0f, 0xaa, 0x48, 0xcf, 0x05, 0xac, 0x22, 0x08, 0xaa, 0x52, 0x48,
	0x8b, 0x8b, 0x0d, 0x62, 0xae, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x10, 0xb2, 0x1e, 0x5f,
	0xb0, 0x4c, 0x10, 0x54, 0x85, 0x92, 0x3a, 0x17, 0x1b, 0x44, 0xb7, 0x10, 0x37, 0x17, 0x7b, 0xa8,
	0x9f, 0xb7, 0x9f, 0x7f, 0xb8, 0x9f, 0x00, 0x83, 0x10, 0x3b, 0x17, 0xb3, 0x87, 0x8b, 0x8b, 0x00,
	0x23, 0x88, 0x11, 0x1c, 0xec, 0x22, 0xc0, 0xe4, 0x64, 0x14, 0x65, 0x90, 0x9e, 0x59, 0x92, 0x51,
	0x9a, 0x04, 0x32, 0x4c, 0xdf, 0x37, 0x3f, 0x23, 0x31, 0x37, 0x35, 0xc5, 0x2f, 0xb1, 0x2a, 0xb3,
	0x48, 0x3f, 0x24, 0x23, 0xd5, 0x39, 0x3f, 0xb7, 0x20, 0x27, 0xb5, 0x24, 0xd5, 0x3d, 0x28, 0xc0,
	0x59, 0x1f, 0xec, 0x0b, 0xfd, 0x82, 0xa4, 0x24, 0x36, 0x30, 0xcb, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xa5, 0x4b, 0x82, 0x87, 0x0a, 0x01, 0x00, 0x00,
}
