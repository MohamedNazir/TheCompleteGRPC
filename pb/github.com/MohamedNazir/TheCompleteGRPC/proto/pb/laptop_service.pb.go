// Code generated by protoc-gen-go. DO NOT EDIT.
// source: laptop_service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateLaptopRequest struct {
	Laptop *Laptop `protobuf:"bytes,1,opt,name=laptop" json:"laptop,omitempty"`
}

func (m *CreateLaptopRequest) Reset()                    { *m = CreateLaptopRequest{} }
func (m *CreateLaptopRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateLaptopRequest) ProtoMessage()               {}
func (*CreateLaptopRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *CreateLaptopRequest) GetLaptop() *Laptop {
	if m != nil {
		return m.Laptop
	}
	return nil
}

type CreateLaptopResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateLaptopResponse) Reset()                    { *m = CreateLaptopResponse{} }
func (m *CreateLaptopResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateLaptopResponse) ProtoMessage()               {}
func (*CreateLaptopResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *CreateLaptopResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SerachLaptopRequest struct {
	Filter *Filter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *SerachLaptopRequest) Reset()                    { *m = SerachLaptopRequest{} }
func (m *SerachLaptopRequest) String() string            { return proto.CompactTextString(m) }
func (*SerachLaptopRequest) ProtoMessage()               {}
func (*SerachLaptopRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *SerachLaptopRequest) GetFilter() *Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type SearchLaptopResponse struct {
	Laptop *Laptop `protobuf:"bytes,1,opt,name=laptop" json:"laptop,omitempty"`
}

func (m *SearchLaptopResponse) Reset()                    { *m = SearchLaptopResponse{} }
func (m *SearchLaptopResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchLaptopResponse) ProtoMessage()               {}
func (*SearchLaptopResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *SearchLaptopResponse) GetLaptop() *Laptop {
	if m != nil {
		return m.Laptop
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateLaptopRequest)(nil), "com.pcbook.CreateLaptopRequest")
	proto.RegisterType((*CreateLaptopResponse)(nil), "com.pcbook.CreateLaptopResponse")
	proto.RegisterType((*SerachLaptopRequest)(nil), "com.pcbook.SerachLaptopRequest")
	proto.RegisterType((*SearchLaptopResponse)(nil), "com.pcbook.SearchLaptopResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LaptopService service

type LaptopServiceClient interface {
	CreateLaptop(ctx context.Context, in *CreateLaptopRequest, opts ...grpc.CallOption) (*CreateLaptopResponse, error)
	// Server Streaming
	SearchLaptop(ctx context.Context, in *SerachLaptopRequest, opts ...grpc.CallOption) (LaptopService_SearchLaptopClient, error)
}

type laptopServiceClient struct {
	cc *grpc.ClientConn
}

func NewLaptopServiceClient(cc *grpc.ClientConn) LaptopServiceClient {
	return &laptopServiceClient{cc}
}

func (c *laptopServiceClient) CreateLaptop(ctx context.Context, in *CreateLaptopRequest, opts ...grpc.CallOption) (*CreateLaptopResponse, error) {
	out := new(CreateLaptopResponse)
	err := grpc.Invoke(ctx, "/com.pcbook.LaptopService/CreateLaptop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laptopServiceClient) SearchLaptop(ctx context.Context, in *SerachLaptopRequest, opts ...grpc.CallOption) (LaptopService_SearchLaptopClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LaptopService_serviceDesc.Streams[0], c.cc, "/com.pcbook.LaptopService/SearchLaptop", opts...)
	if err != nil {
		return nil, err
	}
	x := &laptopServiceSearchLaptopClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LaptopService_SearchLaptopClient interface {
	Recv() (*SearchLaptopResponse, error)
	grpc.ClientStream
}

type laptopServiceSearchLaptopClient struct {
	grpc.ClientStream
}

func (x *laptopServiceSearchLaptopClient) Recv() (*SearchLaptopResponse, error) {
	m := new(SearchLaptopResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for LaptopService service

type LaptopServiceServer interface {
	CreateLaptop(context.Context, *CreateLaptopRequest) (*CreateLaptopResponse, error)
	// Server Streaming
	SearchLaptop(*SerachLaptopRequest, LaptopService_SearchLaptopServer) error
}

func RegisterLaptopServiceServer(s *grpc.Server, srv LaptopServiceServer) {
	s.RegisterService(&_LaptopService_serviceDesc, srv)
}

func _LaptopService_CreateLaptop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLaptopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaptopServiceServer).CreateLaptop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pcbook.LaptopService/CreateLaptop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaptopServiceServer).CreateLaptop(ctx, req.(*CreateLaptopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaptopService_SearchLaptop_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SerachLaptopRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LaptopServiceServer).SearchLaptop(m, &laptopServiceSearchLaptopServer{stream})
}

type LaptopService_SearchLaptopServer interface {
	Send(*SearchLaptopResponse) error
	grpc.ServerStream
}

type laptopServiceSearchLaptopServer struct {
	grpc.ServerStream
}

func (x *laptopServiceSearchLaptopServer) Send(m *SearchLaptopResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _LaptopService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.pcbook.LaptopService",
	HandlerType: (*LaptopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLaptop",
			Handler:    _LaptopService_CreateLaptop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchLaptop",
			Handler:       _LaptopService_SearchLaptop_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "laptop_service.proto",
}

func init() { proto.RegisterFile("laptop_service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x9b, 0x0e, 0x95, 0x38, 0x0a, 0x83, 0xc9, 0x80, 0xb2, 0x50, 0x79, 0x40, 0x88, 0x21,
	0xa9, 0xc2, 0x2f, 0xa0, 0x91, 0x60, 0x01, 0x84, 0x12, 0x58, 0x58, 0x90, 0x93, 0x1c, 0x8d, 0x45,
	0x82, 0x8d, 0xed, 0x32, 0xf0, 0xd7, 0xf8, 0x73, 0xa8, 0xb6, 0x51, 0x13, 0x11, 0x06, 0xb6, 0xe8,
	0xf2, 0xdd, 0x7b, 0xef, 0x9e, 0x21, 0x6c, 0x99, 0x34, 0x42, 0x3e, 0x6b, 0x54, 0x1f, 0xbc, 0xc2,
	0x58, 0x2a, 0x61, 0x04, 0x81, 0x4a, 0x74, 0xb1, 0xac, 0x4a, 0x21, 0x5e, 0xa3, 0x1f, 0xa2, 0x43,
	0xad, 0xd9, 0xda, 0x13, 0x51, 0xf8, 0xc2, 0x5b, 0x83, 0x6a, 0x38, 0xa5, 0x97, 0x70, 0x94, 0x29,
	0x64, 0x06, 0x6f, 0xec, 0x4e, 0x8e, 0xef, 0x1b, 0xd4, 0x86, 0x9c, 0xc3, 0xcc, 0x89, 0x1c, 0x07,
	0x8b, 0xe0, 0x6c, 0x3f, 0x25, 0xf1, 0x4e, 0x3f, 0xf6, 0xa8, 0x27, 0xe8, 0x29, 0x84, 0x43, 0x09,
	0x2d, 0xc5, 0x9b, 0x46, 0x72, 0x08, 0x53, 0x5e, 0xdb, 0xfd, 0xbd, 0x7c, 0xca, 0xeb, 0xad, 0x55,
	0x81, 0x8a, 0x55, 0xcd, 0x2f, 0x2b, 0x97, 0x6c, 0xcc, 0xea, 0xca, 0xfe, 0xc9, 0x3d, 0x41, 0x57,
	0x10, 0x16, 0xc8, 0xd4, 0x4e, 0xc2, 0x5b, 0xfd, 0x23, 0x6e, 0xfa, 0x15, 0xc0, 0x81, 0x1b, 0x15,
	0xae, 0x41, 0x52, 0xc0, 0xbc, 0x7f, 0x00, 0x39, 0xe9, 0x6f, 0x8f, 0xb4, 0x13, 0x2d, 0xfe, 0x06,
	0x5c, 0x20, 0x3a, 0x21, 0x8f, 0x30, 0xef, 0x47, 0x1d, 0x8a, 0x8e, 0xf4, 0x30, 0x14, 0x1d, 0xbb,
	0x92, 0x4e, 0x96, 0xc1, 0x2a, 0x7d, 0x5a, 0xae, 0xb9, 0x69, 0x36, 0xe5, 0x96, 0x4e, 0x6e, 0x45,
	0xc3, 0x3a, 0xac, 0xef, 0xd8, 0x27, 0x57, 0xc9, 0x43, 0x83, 0x99, 0xe8, 0x64, 0x8b, 0x06, 0xaf,
	0xf3, 0xfb, 0x2c, 0xb1, 0x0f, 0x9c, 0xc8, 0xb2, 0x9c, 0xd9, 0xaf, 0x8b, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb6, 0xdb, 0xf8, 0x7c, 0x3a, 0x02, 0x00, 0x00,
}
