// Code generated by protoc-gen-go. DO NOT EDIT.
// source: keyboard_message.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Keyboard_Layout int32

const (
	Keyboard_UNKNOWN Keyboard_Layout = 0
	Keyboard_QWERTY  Keyboard_Layout = 1
	Keyboard_QWERTZ  Keyboard_Layout = 2
	Keyboard_AZERTY  Keyboard_Layout = 3
)

var Keyboard_Layout_name = map[int32]string{
	0: "UNKNOWN",
	1: "QWERTY",
	2: "QWERTZ",
	3: "AZERTY",
}
var Keyboard_Layout_value = map[string]int32{
	"UNKNOWN": 0,
	"QWERTY":  1,
	"QWERTZ":  2,
	"AZERTY":  3,
}

func (x Keyboard_Layout) String() string {
	return proto.EnumName(Keyboard_Layout_name, int32(x))
}
func (Keyboard_Layout) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type Keyboard struct {
	Layout  Keyboard_Layout `protobuf:"varint,1,opt,name=layout,enum=com.pcbook.Keyboard_Layout" json:"layout,omitempty"`
	Backlit bool            `protobuf:"varint,2,opt,name=backlit" json:"backlit,omitempty"`
}

func (m *Keyboard) Reset()                    { *m = Keyboard{} }
func (m *Keyboard) String() string            { return proto.CompactTextString(m) }
func (*Keyboard) ProtoMessage()               {}
func (*Keyboard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Keyboard) GetLayout() Keyboard_Layout {
	if m != nil {
		return m.Layout
	}
	return Keyboard_UNKNOWN
}

func (m *Keyboard) GetBacklit() bool {
	if m != nil {
		return m.Backlit
	}
	return false
}

func init() {
	proto.RegisterType((*Keyboard)(nil), "com.pcbook.Keyboard")
	proto.RegisterEnum("com.pcbook.Keyboard_Layout", Keyboard_Layout_name, Keyboard_Layout_value)
}

func init() { proto.RegisterFile("keyboard_message.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x4e, 0xad, 0x4c,
	0xca, 0x4f, 0x2c, 0x4a, 0x89, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x4a, 0xce, 0xcf, 0xd5, 0x2b, 0x48, 0x4e, 0xca, 0xcf, 0xcf, 0x56, 0x9a,
	0xc2, 0xc8, 0xc5, 0xe1, 0x0d, 0x55, 0x26, 0x64, 0xcc, 0xc5, 0x96, 0x93, 0x58, 0x99, 0x5f, 0x5a,
	0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x67, 0x24, 0xad, 0x87, 0x50, 0xa9, 0x07, 0x53, 0xa5, 0xe7,
	0x03, 0x56, 0x12, 0x04, 0x55, 0x2a, 0x24, 0xc1, 0xc5, 0x9e, 0x94, 0x98, 0x9c, 0x9d, 0x93, 0x59,
	0x22, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x11, 0x04, 0xe3, 0x2a, 0x59, 0x72, 0xb1, 0x41, 0xd4, 0x0a,
	0x71, 0x73, 0xb1, 0x87, 0xfa, 0x79, 0xfb, 0xf9, 0x87, 0xfb, 0x09, 0x30, 0x08, 0x71, 0x71, 0xb1,
	0x05, 0x86, 0xbb, 0x06, 0x85, 0x44, 0x0a, 0x30, 0xc2, 0xd9, 0x51, 0x02, 0x4c, 0x20, 0xb6, 0x63,
	0x14, 0x58, 0x9c, 0xd9, 0xc9, 0x28, 0xca, 0x20, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x09, 0xe4, 0x02,
	0x7d, 0xdf, 0xfc, 0x8c, 0xc4, 0xdc, 0xd4, 0x14, 0xbf, 0xc4, 0xaa, 0xcc, 0x22, 0xfd, 0x90, 0x8c,
	0x54, 0xe7, 0xfc, 0xdc, 0x82, 0x9c, 0xd4, 0x92, 0x54, 0xf7, 0xa0, 0x00, 0x67, 0x7d, 0xb0, 0x9f,
	0xf4, 0x0b, 0x92, 0x92, 0xd8, 0xc0, 0x2c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0xfe,
	0x27, 0xfa, 0xf7, 0x00, 0x00, 0x00,
}
